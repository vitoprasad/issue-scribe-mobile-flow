
import React, { useState } from 'react';
import { 
  Table, 
  TableHeader, 
  TableBody, 
  TableHead, 
  TableRow, 
  TableCell 
} from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Check, X, Pencil, FileText, Package, Shield, DollarSign, Clock, Cpu, Tag } from 'lucide-react';
import { useToast } from "@/hooks/use-toast";
import { executiveFeedback } from '@/data/mockFeedbackData';
import { ChangeLogEntry } from '@/types/issue-triage';
import { DiscussionItem, QuickResponseTemplate, RepairAction } from './approval-requests/types';
import { RepairActionDetailViewDialog } from './repair-actions/RepairActionDetailViewDialog';
import { getQuickResponseTemplates } from './repair-actions/utils';

// Enhanced mock data to include fields needed for the detail view
const mockData = [
  {
    id: 'CL-2025-001',
    parts: ['A320-FN23', 'B451-TH89'],
    systems: ['Propulsion', 'Navigation'],
    riskLevel: 'High',
    costSavings: 25000,
    timeSavings: 48,
    suggestedAction: 'Replace faulty wiring harness in control unit',
    submittedBy: 'AI System',
    submissionDate: '2025-03-15T10:30:00Z',
    aiConfidence: 92,
    notes: 'This repair has been identified as critical due to potential downtime impact. Wiring harness degradation has been observed in 35% of units.',
    similarIssues: ['RA-2024-089', 'RA-2024-112', 'RA-2024-145'],
    changelog: [
      {
        id: 'cl-001',
        timestamp: '2025-03-15T10:30:00Z',
        user: 'System',
        action: 'created',
        comment: 'Initial repair action generated by AI analysis'
      }
    ],
    discussion: [
      {
        id: 'disc-001',
        timestamp: '2025-03-15T14:22:00Z',
        user: 'Sarah Chen',
        message: "I have seen this issue before. The wiring harness specification needs to be upgraded in the next revision.",
        responses: [
          {
            id: 'resp-001',
            timestamp: '2025-03-15T15:10:00Z',
            user: 'Michael Rodriguez',
            message: 'Agreed. We should also consider implementing additional testing for these components.'
          }
        ]
      }
    ]
  },
  {
    id: 'CL-2025-002',
    parts: ['C789-GH12', 'D234-JK56'],
    systems: ['Avionics', 'Communications'],
    riskLevel: 'Medium',
    costSavings: 12000,
    timeSavings: 24,
    suggestedAction: 'Recalibrate sensor array and update firmware',
    submittedBy: 'AI System',
    submissionDate: '2025-03-18T08:45:00Z',
    aiConfidence: 85,
    notes: 'Sensor drift identified in navigational arrays, contributing to inaccurate readings.',
    similarIssues: ['RA-2024-076'],
    changelog: [
      {
        id: 'cl-002',
        timestamp: '2025-03-18T08:45:00Z',
        user: 'System',
        action: 'created',
        comment: 'Initial repair action generated by AI analysis'
      }
    ],
    discussion: []
  },
  {
    id: 'CL-2025-003',
    parts: ['E567-LM90', 'F890-OP34'],
    systems: ['Hydraulic', 'Landing Gear'],
    riskLevel: 'Low',
    costSavings: 5000,
    timeSavings: 8,
    suggestedAction: 'Replace worn gaskets in hydraulic system',
    submittedBy: 'AI System',
    submissionDate: '2025-03-22T13:15:00Z',
    aiConfidence: 78,
    notes: 'Regular maintenance observation shows early wear patterns in gaskets.',
    changelog: [
      {
        id: 'cl-003',
        timestamp: '2025-03-22T13:15:00Z',
        user: 'System',
        action: 'created',
        comment: 'Initial repair action generated by AI analysis'
      }
    ],
    discussion: []
  },
  {
    id: 'CL-2025-004',
    parts: ['G123-QR78', 'H456-ST12'],
    systems: ['Cooling', 'Power'],
    riskLevel: 'High',
    costSavings: 32000,
    timeSavings: 72,
    suggestedAction: 'Overhaul cooling system and replace heat exchanger',
    submittedBy: 'AI System',
    submissionDate: '2025-03-25T09:20:00Z',
    aiConfidence: 94,
    notes: 'Thermal analysis shows critical degradation in heat exchanger efficiency.',
    similarIssues: ['RA-2024-032', 'RA-2024-047'],
    changelog: [
      {
        id: 'cl-004',
        timestamp: '2025-03-25T09:20:00Z',
        user: 'System',
        action: 'created',
        comment: 'Initial repair action generated by AI analysis'
      }
    ],
    discussion: []
  },
  {
    id: 'CL-2025-005',
    parts: ['I789-UV56', 'J012-WX90'],
    systems: ['Electrical', 'Avionics'],
    riskLevel: 'Medium',
    costSavings: 18000,
    timeSavings: 36,
    suggestedAction: 'Replace faulty circuit boards in control panel',
    submittedBy: 'AI System',
    submissionDate: '2025-03-27T11:05:00Z',
    aiConfidence: 88,
    similarIssues: ['RA-2024-123'],
    changelog: [
      {
        id: 'cl-005',
        timestamp: '2025-03-27T11:05:00Z',
        user: 'System',
        action: 'created',
        comment: 'Initial repair action generated by AI analysis'
      }
    ],
    discussion: []
  },
  {
    id: 'CL-2025-006',
    parts: ['K345-YZ78', 'L678-AB12'],
    systems: ['Power Distribution', 'Thermal'],
    riskLevel: 'Low',
    costSavings: 7500,
    timeSavings: 16,
    suggestedAction: 'Correct assembly error in power distribution module',
    submittedBy: 'AI System',
    submissionDate: '2025-03-29T15:30:00Z',
    aiConfidence: 82,
    changelog: [
      {
        id: 'cl-006',
        timestamp: '2025-03-29T15:30:00Z',
        user: 'System',
        action: 'created',
        comment: 'Initial repair action generated by AI analysis'
      }
    ],
    discussion: []
  }
];

export const RepairActionsTable = () => {
  const { toast } = useToast();
  const [tableData, setTableData] = useState<RepairAction[]>(mockData);
  
  // State for detail view dialog
  const [selectedRepairAction, setSelectedRepairAction] = useState<RepairAction | null>(null);
  const [detailViewOpen, setDetailViewOpen] = useState(false);
  const [activeTab, setActiveTab] = useState('details');
  const [changeLogEntry, setChangeLogEntry] = useState('');
  const [discussionMessage, setDiscussionMessage] = useState('');
  const quickResponseTemplates = getQuickResponseTemplates();

  // Extract system tags from executive feedback
  const getExecutiveSystemTags = () => {
    const systemTags: string[] = [];
    executiveFeedback.forEach(feedback => {
      if (feedback.tags) {
        feedback.tags.forEach(tag => {
          if (!systemTags.includes(tag)) {
            systemTags.push(tag);
          }
        });
      }
    });
    return systemTags;
  };

  const executiveSystemTags = getExecutiveSystemTags();

  // Check if a system is tagged in executive feedback
  const isSystemTagged = (system: string) => {
    return executiveSystemTags.includes(system);
  };

  const handleViewDetails = (repairAction: RepairAction) => {
    setSelectedRepairAction(repairAction);
    setActiveTab('details');
    setDetailViewOpen(true);
  };

  const handleAction = (id: string, action: 'approve' | 'modify' | 'reject') => {
    const actionMessages = {
      approve: 'Repair action approved',
      modify: 'Repair action marked for modification',
      reject: 'Repair action rejected'
    };
    
    toast({
      title: actionMessages[action],
      description: `Cluster ID: ${id}`,
    });
    
    setTableData(tableData.filter(item => item.id !== id));
    setDetailViewOpen(false);
  };

  const handleAddChangeLogEntry = () => {
    if (!selectedRepairAction || !changeLogEntry.trim()) return;
    
    const newEntry: ChangeLogEntry = {
      id: `cl-${Date.now()}`,
      timestamp: new Date().toISOString(),
      user: 'Manager',
      action: 'commented',
      comment: changeLogEntry
    };
    
    const updatedRepairAction = {
      ...selectedRepairAction,
      changelog: [...(selectedRepairAction.changelog || []), newEntry]
    };
    
    setSelectedRepairAction(updatedRepairAction);
    
    // Update the table data
    setTableData(tableData.map(item => 
      item.id === selectedRepairAction.id ? updatedRepairAction : item
    ));
    
    setChangeLogEntry('');
    
    toast({
      title: 'Change log entry added',
      description: 'Your note has been added to the change log.',
    });
  };

  const handleAddDiscussionMessage = () => {
    if (!selectedRepairAction || !discussionMessage.trim()) return;
    
    const newDiscussion: DiscussionItem = {
      id: `disc-${Date.now()}`,
      timestamp: new Date().toISOString(),
      user: 'Manager',
      message: discussionMessage,
      responses: []
    };
    
    const updatedRepairAction = {
      ...selectedRepairAction,
      discussion: [...(selectedRepairAction.discussion || []), newDiscussion]
    };
    
    setSelectedRepairAction(updatedRepairAction);
    
    // Update the table data
    setTableData(tableData.map(item => 
      item.id === selectedRepairAction.id ? updatedRepairAction : item
    ));
    
    setDiscussionMessage('');
    
    toast({
      title: 'Comment added',
      description: 'Your comment has been added to the discussion.',
    });
  };

  const handleSelectResponseTemplate = (template: string) => {
    setDiscussionMessage(template);
  };

  const getRiskBadge = (risk: string) => {
    switch(risk) {
      case 'High':
        return <Badge variant="destructive" className="font-medium">High</Badge>;
      case 'Medium':
        return <Badge variant="default" className="bg-amber-500 font-medium">Medium</Badge>;
      case 'Low':
        return <Badge variant="outline" className="text-green-600 border-green-600 font-medium">Low</Badge>;
      default:
        return <Badge>{risk}</Badge>;
    }
  };

  return (
    <div className="w-full">
      <Table>
        <TableHeader>
          <TableRow className="bg-muted/50">
            <TableHead className="w-[110px]">
              <div className="flex items-center gap-2">
                <FileText className="h-4 w-4" />
                <span>Cluster ID</span>
              </div>
            </TableHead>
            <TableHead className="w-[180px]">
              <div className="flex items-center gap-2">
                <Package className="h-4 w-4" />
                <span>Affected Parts</span>
              </div>
            </TableHead>
            <TableHead className="w-[180px]">
              <div className="flex items-center gap-2">
                <Cpu className="h-4 w-4" />
                <span>Affected Systems</span>
              </div>
            </TableHead>
            <TableHead className="w-[110px]">
              <div className="flex items-center gap-2">
                <Shield className="h-4 w-4" />
                <span>Risk Level</span>
              </div>
            </TableHead>
            <TableHead className="w-[140px]">
              <div className="flex items-center gap-2">
                <DollarSign className="h-4 w-4" />
                <span>Cost Savings</span>
              </div>
            </TableHead>
            <TableHead className="w-[140px]">
              <div className="flex items-center gap-2">
                <Clock className="h-4 w-4" />
                <span>Time Savings</span>
              </div>
            </TableHead>
            <TableHead>
              <span>Suggested Action</span>
            </TableHead>
            <TableHead className="w-[200px] text-right">Actions</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {tableData.map((item) => (
            <TableRow key={item.id} className={item.systems.some(isSystemTagged) ? "bg-blue-50" : ""}>
              <TableCell className="font-medium">{item.id}</TableCell>
              <TableCell>
                <div className="flex flex-col gap-1">
                  {item.parts.map((part, index) => (
                    <Badge key={index} variant="outline" className="justify-start max-w-fit">
                      {part}
                    </Badge>
                  ))}
                </div>
              </TableCell>
              <TableCell>
                <div className="flex flex-col gap-1">
                  {item.systems.map((system, index) => (
                    <Badge 
                      key={index} 
                      variant="outline" 
                      className={`justify-start max-w-fit flex items-center gap-1 ${
                        isSystemTagged(system) 
                          ? "bg-blue-100 text-blue-800 border-blue-300" 
                          : "bg-blue-50 text-blue-700 border-blue-200"
                      }`}
                    >
                      {isSystemTagged(system) && <Tag className="h-3 w-3" />}
                      {system}
                    </Badge>
                  ))}
                </div>
              </TableCell>
              <TableCell>{getRiskBadge(item.riskLevel)}</TableCell>
              <TableCell>${item.costSavings.toLocaleString()}</TableCell>
              <TableCell>{item.timeSavings} hrs</TableCell>
              <TableCell className="max-w-[300px]">{item.suggestedAction}</TableCell>
              <TableCell className="text-right">
                <div className="flex justify-end gap-2">
                  <Button 
                    size="sm" 
                    variant="outline"
                    onClick={() => handleViewDetails(item)}
                    title="View details"
                  >
                    <FileText className="h-4 w-4 text-blue-600" />
                    <span className="sr-only">View details</span>
                  </Button>
                  <Button 
                    size="sm" 
                    variant="outline" 
                    className="border-green-600 text-green-600 hover:bg-green-50"
                    onClick={() => handleAction(item.id, 'approve')}
                  >
                    <Check className="h-4 w-4" />
                    <span className="sr-only">Approve</span>
                  </Button>
                  <Button 
                    size="sm" 
                    variant="outline" 
                    className="border-blue-500 text-blue-500 hover:bg-blue-50"
                    onClick={() => handleAction(item.id, 'modify')}
                  >
                    <Pencil className="h-4 w-4" />
                    <span className="sr-only">Modify</span>
                  </Button>
                  <Button 
                    size="sm" 
                    variant="outline" 
                    className="border-red-600 text-red-600 hover:bg-red-50"
                    onClick={() => handleAction(item.id, 'reject')}
                  >
                    <X className="h-4 w-4" />
                    <span className="sr-only">Reject</span>
                  </Button>
                </div>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>

      {/* Detail View Dialog */}
      <RepairActionDetailViewDialog
        open={detailViewOpen}
        onOpenChange={setDetailViewOpen}
        repairAction={selectedRepairAction}
        activeTab={activeTab}
        setActiveTab={setActiveTab}
        changeLogEntry={changeLogEntry}
        setChangeLogEntry={setChangeLogEntry}
        discussionMessage={discussionMessage}
        setDiscussionMessage={setDiscussionMessage}
        quickResponseTemplates={quickResponseTemplates}
        onAddChangeLogEntry={handleAddChangeLogEntry}
        onAddDiscussionMessage={handleAddDiscussionMessage}
        onSelectResponseTemplate={handleSelectResponseTemplate}
        onApprove={() => selectedRepairAction && handleAction(selectedRepairAction.id, 'approve')}
        onReject={() => selectedRepairAction && handleAction(selectedRepairAction.id, 'reject')}
        onModify={() => selectedRepairAction && handleAction(selectedRepairAction.id, 'modify')}
      />
    </div>
  );
};
